{"name":"PowerShell Scripts and Techniques","tagline":"powershell scripts","body":"### PowerShell Scripts and Techniques\r\nHere is a set of PowerShell one-liners, scripts and techniques that I've found useful (but can't always keep on the tip of my tongue).  \r\n\r\nYou'll need the Active Directory cmdlets for many of these.\r\n\r\n## List all the Windows servers in a domain and export them to csv\r\n```\r\nGet-ADComputer -Filter {OperatingSystem -Like \"Windows *Server*\"}\r\n    -Properties * | Select-Object Name,OperatingSystem | \r\n    Export-Csv AllServers.csv -NoTypeInformation -Encoding UTF8\r\n```\r\n\r\nInstead of csv, prints a table to standard out\r\n\r\n```\r\nGet-ADComputer -filter {(PasswordLastSet -le $date)\r\n    -and (OperatingSystem -Like \"Windows *Server*\")} \r\n    -Properties * | select-object Name,OperatingSystem,PasswordLastSet \r\n    | Format-table Name,OperatingSystem,PasswordLastSet -Wrap -Auto\r\n```\r\n\r\n## List servers who have computer passwords older than 90 days\r\nThese are ostensibly expired computer accounts.  Exports to csv. \r\n\r\n```\r\n$date = [DateTime]::Today.AddDays(-90)\r\n\r\nGet-ADComputer -filter {(PasswordLastSet -le $date) -and \r\n    (OperatingSystem -Like \"Windows *Server*\")} -Properties * \r\n    | select-object Name,OperatingSystem,PasswordLastSet \r\n    | Export-csv old.csv -NoTypeInformation -Encoding UTF8\r\n```\r\n\r\n## Query Active Directory and ping results\r\nUseful as a filter, prior to performing an action on computers en masse thus preventing RPC errors.\r\nThis pulls every computer; modify it appropriately.\r\n\r\n```\r\nImport-Module active*\r\n$rtn = $null\r\nGet-ADComputer -Filter * | ForEach-Object {\r\n    $rtn = Test-Connection -CN $_.dnshostname \r\n    -Count 1 -BufferSize 16 -Quiet\r\n    IF($rtn -match 'True') {write-host -ForegroundColor \r\n        green $_.dnshostname}\r\n    ELSE {write-host -ForegroundColor red $_.dnshostname}\r\n}\r\n```\r\n\r\n## Change DNS Servers and Search Order; IP and Mask; Router\r\n\r\n```\r\n$wmi = Get-WmiObject win32_networkadapterconfiguration \r\n    -filter \"ipenabled = 'true'\"\r\n$wmi.EnableStatic(\"192.168.1.10\", \"255.255.255.0\")\r\n$wmi.SetGateways(\"192.168.1.1\",1)\r\n$wmi.SetDNSServerSearchOrder(\"192.168.1.4\")\r\n```\r\n\r\n## Change FSMO Roles\r\nUse ```netdom query FSMO``` to get FSMO roles.\r\nOf course, you should know what roles correspond to which numbers [0..4]\r\n\r\n```\r\nMove-ADDirectoryServerOperationMasterRole -identity \r\n    \"servername\" -OperationMasterRole 0,1,2,3,4\r\n```\r\n\r\n## Modify an attribute (or attributes) of all users in an OU\r\n\r\n```\r\nGet-aduser â€“filter * -SearchBase \r\n    \"ou=YourOU,ou=YourSubOU,ou=YourSubSubOU,dc=yourdomain,dc=com\" \r\n    | set-aduser -PasswordNeverExpires $true\r\n```\r\n\r\n## Find a user's AD account if you don't know their account name.\r\nYou only know their first and last name (i.e. Herman Melville).\r\n\r\n```\r\nGet-ADUser -Filter 'Name -like \"*melville*\"'\r\n```\r\n\r\n## Add an AD user to a group\r\n\r\n```\r\nAdd-ADGroupMember 'Billing' hmelville\r\n```\r\n\r\n## Verify a user is a member of a group\r\n\r\n```\r\nget-adgroup 'Billing' | where name -like \"*melville*\"\r\n```\r\n\r\n## Use echoargs.exe to verify external commands prior to use\r\nHere a text file full of dnscmd generated zone information is parsed for a DNS server's zones.\r\nThen echoargs will show you how parameters are passed to the external command dnscmd.  You'll see if any extra quotes are passed, or not before executing mudged commands on your production servers.\r\n\r\nDnscmd, if you care, is used here to add two secondary servers (192.168.1.5 and 192.168.1.6) to each zone for a server.\r\n\r\nNote the & prior to the called command; keep this when finally invoking your command.\r\n\r\n```\r\ngc .\\stuff.txt | select-string -Pattern \"Primary\" \r\n    | foreach {$zone = ($_ -split '\\s+')[1]; \r\n    $callargs = @($server, \"/ZoneResetSecondaries\", \r\n    $zone, \"/SecureList\", \"192.168.1.5\", \"192.168.1.6\", \"/Notify\") ;\r\n    &c:\\bin\\echoargs.exe dnscmd $callargs}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}